// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Follow is an object representing the database table.
type Follow struct {
	FollowerID int       `boil:"follower_id" json:"follower_id" toml:"follower_id" yaml:"follower_id"`
	FolloweeID int       `boil:"followee_id" json:"followee_id" toml:"followee_id" yaml:"followee_id"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *followR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L followL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FollowColumns = struct {
	FollowerID string
	FolloweeID string
	CreatedAt  string
	UpdatedAt  string
}{
	FollowerID: "follower_id",
	FolloweeID: "followee_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var FollowTableColumns = struct {
	FollowerID string
	FolloweeID string
	CreatedAt  string
	UpdatedAt  string
}{
	FollowerID: "follows.follower_id",
	FolloweeID: "follows.followee_id",
	CreatedAt:  "follows.created_at",
	UpdatedAt:  "follows.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FollowWhere = struct {
	FollowerID whereHelperint
	FolloweeID whereHelperint
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	FollowerID: whereHelperint{field: "\"follows\".\"follower_id\""},
	FolloweeID: whereHelperint{field: "\"follows\".\"followee_id\""},
	CreatedAt:  whereHelpernull_Time{field: "\"follows\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"follows\".\"updated_at\""},
}

// FollowRels is where relationship names are stored.
var FollowRels = struct {
	Followee string
	Follower string
}{
	Followee: "Followee",
	Follower: "Follower",
}

// followR is where relationships are stored.
type followR struct {
	Followee *User `boil:"Followee" json:"Followee" toml:"Followee" yaml:"Followee"`
	Follower *User `boil:"Follower" json:"Follower" toml:"Follower" yaml:"Follower"`
}

// NewStruct creates a new relationship struct
func (*followR) NewStruct() *followR {
	return &followR{}
}

// followL is where Load methods for each relationship are stored.
type followL struct{}

var (
	followAllColumns            = []string{"follower_id", "followee_id", "created_at", "updated_at"}
	followColumnsWithoutDefault = []string{"follower_id", "followee_id"}
	followColumnsWithDefault    = []string{"created_at", "updated_at"}
	followPrimaryKeyColumns     = []string{"follower_id", "followee_id"}
)

type (
	// FollowSlice is an alias for a slice of pointers to Follow.
	// This should almost always be used instead of []Follow.
	FollowSlice []*Follow
	// FollowHook is the signature for custom Follow hook methods
	FollowHook func(context.Context, boil.ContextExecutor, *Follow) error

	followQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	followType                 = reflect.TypeOf(&Follow{})
	followMapping              = queries.MakeStructMapping(followType)
	followPrimaryKeyMapping, _ = queries.BindMapping(followType, followMapping, followPrimaryKeyColumns)
	followInsertCacheMut       sync.RWMutex
	followInsertCache          = make(map[string]insertCache)
	followUpdateCacheMut       sync.RWMutex
	followUpdateCache          = make(map[string]updateCache)
	followUpsertCacheMut       sync.RWMutex
	followUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var followBeforeInsertHooks []FollowHook
var followBeforeUpdateHooks []FollowHook
var followBeforeDeleteHooks []FollowHook
var followBeforeUpsertHooks []FollowHook

var followAfterInsertHooks []FollowHook
var followAfterSelectHooks []FollowHook
var followAfterUpdateHooks []FollowHook
var followAfterDeleteHooks []FollowHook
var followAfterUpsertHooks []FollowHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Follow) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Follow) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Follow) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Follow) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Follow) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Follow) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Follow) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Follow) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Follow) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFollowHook registers your hook function for all future operations.
func AddFollowHook(hookPoint boil.HookPoint, followHook FollowHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		followBeforeInsertHooks = append(followBeforeInsertHooks, followHook)
	case boil.BeforeUpdateHook:
		followBeforeUpdateHooks = append(followBeforeUpdateHooks, followHook)
	case boil.BeforeDeleteHook:
		followBeforeDeleteHooks = append(followBeforeDeleteHooks, followHook)
	case boil.BeforeUpsertHook:
		followBeforeUpsertHooks = append(followBeforeUpsertHooks, followHook)
	case boil.AfterInsertHook:
		followAfterInsertHooks = append(followAfterInsertHooks, followHook)
	case boil.AfterSelectHook:
		followAfterSelectHooks = append(followAfterSelectHooks, followHook)
	case boil.AfterUpdateHook:
		followAfterUpdateHooks = append(followAfterUpdateHooks, followHook)
	case boil.AfterDeleteHook:
		followAfterDeleteHooks = append(followAfterDeleteHooks, followHook)
	case boil.AfterUpsertHook:
		followAfterUpsertHooks = append(followAfterUpsertHooks, followHook)
	}
}

// OneG returns a single follow record from the query using the global executor.
func (q followQuery) OneG(ctx context.Context) (*Follow, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single follow record from the query.
func (q followQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Follow, error) {
	o := &Follow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for follows")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Follow records from the query using the global executor.
func (q followQuery) AllG(ctx context.Context) (FollowSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Follow records from the query.
func (q followQuery) All(ctx context.Context, exec boil.ContextExecutor) (FollowSlice, error) {
	var o []*Follow

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Follow slice")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Follow records in the query, and panics on error.
func (q followQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Follow records in the query.
func (q followQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count follows rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q followQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q followQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if follows exists")
	}

	return count > 0, nil
}

// Followee pointed to by the foreign key.
func (o *Follow) Followee(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FolloweeID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Follower pointed to by the foreign key.
func (o *Follow) Follower(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FollowerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadFollowee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadFollowee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		object = maybeFollow.(*Follow)
	} else {
		slice = *maybeFollow.(*[]*Follow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.FolloweeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.FolloweeID {
					continue Outer
				}
			}

			args = append(args, obj.FolloweeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Followee = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FolloweeFollows = append(foreign.R.FolloweeFollows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FolloweeID == foreign.ID {
				local.R.Followee = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FolloweeFollows = append(foreign.R.FolloweeFollows, local)
				break
			}
		}
	}

	return nil
}

// LoadFollower allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadFollower(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		object = maybeFollow.(*Follow)
	} else {
		slice = *maybeFollow.(*[]*Follow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.FollowerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.FollowerID {
					continue Outer
				}
			}

			args = append(args, obj.FollowerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Follower = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowerFollows = append(foreign.R.FollowerFollows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowerID == foreign.ID {
				local.R.Follower = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowerFollows = append(foreign.R.FollowerFollows, local)
				break
			}
		}
	}

	return nil
}

// SetFolloweeG of the follow to the related item.
// Sets o.R.Followee to related.
// Adds o to related.R.FolloweeFollows.
// Uses the global database handle.
func (o *Follow) SetFolloweeG(ctx context.Context, insert bool, related *User) error {
	return o.SetFollowee(ctx, boil.GetContextDB(), insert, related)
}

// SetFollowee of the follow to the related item.
// Sets o.R.Followee to related.
// Adds o to related.R.FolloweeFollows.
func (o *Follow) SetFollowee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follows\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"followee_id"}),
		strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FollowerID, o.FolloweeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FolloweeID = related.ID
	if o.R == nil {
		o.R = &followR{
			Followee: related,
		}
	} else {
		o.R.Followee = related
	}

	if related.R == nil {
		related.R = &userR{
			FolloweeFollows: FollowSlice{o},
		}
	} else {
		related.R.FolloweeFollows = append(related.R.FolloweeFollows, o)
	}

	return nil
}

// SetFollowerG of the follow to the related item.
// Sets o.R.Follower to related.
// Adds o to related.R.FollowerFollows.
// Uses the global database handle.
func (o *Follow) SetFollowerG(ctx context.Context, insert bool, related *User) error {
	return o.SetFollower(ctx, boil.GetContextDB(), insert, related)
}

// SetFollower of the follow to the related item.
// Sets o.R.Follower to related.
// Adds o to related.R.FollowerFollows.
func (o *Follow) SetFollower(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follows\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"follower_id"}),
		strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FollowerID, o.FolloweeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowerID = related.ID
	if o.R == nil {
		o.R = &followR{
			Follower: related,
		}
	} else {
		o.R.Follower = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowerFollows: FollowSlice{o},
		}
	} else {
		related.R.FollowerFollows = append(related.R.FollowerFollows, o)
	}

	return nil
}

// Follows retrieves all the records using an executor.
func Follows(mods ...qm.QueryMod) followQuery {
	mods = append(mods, qm.From("\"follows\""))
	return followQuery{NewQuery(mods...)}
}

// FindFollowG retrieves a single record by ID.
func FindFollowG(ctx context.Context, followerID int, followeeID int, selectCols ...string) (*Follow, error) {
	return FindFollow(ctx, boil.GetContextDB(), followerID, followeeID, selectCols...)
}

// FindFollow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFollow(ctx context.Context, exec boil.ContextExecutor, followerID int, followeeID int, selectCols ...string) (*Follow, error) {
	followObj := &Follow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"follows\" where \"follower_id\"=$1 AND \"followee_id\"=$2", sel,
	)

	q := queries.Raw(query, followerID, followeeID)

	err := q.Bind(ctx, exec, followObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from follows")
	}

	if err = followObj.doAfterSelectHooks(ctx, exec); err != nil {
		return followObj, err
	}

	return followObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Follow) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Follow) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no follows provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	followInsertCacheMut.RLock()
	cache, cached := followInsertCache[key]
	followInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(followType, followMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"follows\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"follows\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into follows")
	}

	if !cached {
		followInsertCacheMut.Lock()
		followInsertCache[key] = cache
		followInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Follow record using the global executor.
// See Update for more documentation.
func (o *Follow) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Follow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Follow) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	followUpdateCacheMut.RLock()
	cache, cached := followUpdateCache[key]
	followUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update follows, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"follows\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, followPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(followType, followMapping, append(wl, followPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update follows row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for follows")
	}

	if !cached {
		followUpdateCacheMut.Lock()
		followUpdateCache[key] = cache
		followUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q followQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q followQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for follows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for follows")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FollowSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FollowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"follows\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, followPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in follow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all follow")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Follow) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Follow) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no follows provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	followUpsertCacheMut.RLock()
	cache, cached := followUpsertCache[key]
	followUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert follows, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(followPrimaryKeyColumns))
			copy(conflict, followPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"follows\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(followType, followMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert follows")
	}

	if !cached {
		followUpsertCacheMut.Lock()
		followUpsertCache[key] = cache
		followUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Follow record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Follow) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Follow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Follow) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Follow provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), followPrimaryKeyMapping)
	sql := "DELETE FROM \"follows\" WHERE \"follower_id\"=$1 AND \"followee_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from follows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for follows")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q followQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q followQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no followQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from follows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for follows")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FollowSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FollowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(followBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"follows\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, followPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from follow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for follows")
	}

	if len(followAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Follow) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: no Follow provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Follow) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFollow(ctx, exec, o.FollowerID, o.FolloweeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: empty FollowSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FollowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"follows\".* FROM \"follows\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, followPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in FollowSlice")
	}

	*o = slice

	return nil
}

// FollowExistsG checks if the Follow row exists.
func FollowExistsG(ctx context.Context, followerID int, followeeID int) (bool, error) {
	return FollowExists(ctx, boil.GetContextDB(), followerID, followeeID)
}

// FollowExists checks if the Follow row exists.
func FollowExists(ctx context.Context, exec boil.ContextExecutor, followerID int, followeeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"follows\" where \"follower_id\"=$1 AND \"followee_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, followerID, followeeID)
	}
	row := exec.QueryRowContext(ctx, sql, followerID, followeeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if follows exists")
	}

	return exists, nil
}
